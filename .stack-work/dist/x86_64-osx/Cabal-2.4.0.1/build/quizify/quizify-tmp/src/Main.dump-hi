
==================== FINAL INTERFACE ====================
2019-03-07 10:44:01.860545 UTC

interface main:Main 8063
  interface hash: db6d3708a8c6057f024d09f5e0b77012
  ABI hash: 8bad5f01a15ed70f2f7cb9fd1eb6611a
  export-list hash: ee3c6a5e1822bb52f8682d3c91115a48
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0771b4a755bf09ff67a1e47e6c716703
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.quizify
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0* deepseq-1.4.4.0
                      ghc-prim-0.5.3 integer-gmp-1.0.2.0 process-1.6.3.0 unix-2.7.2.2
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.IO edc9355d7dbab399fd5d385cd5bb457d
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  base-4.12.0.0:System.Environment 2204870ad586be67c274aa49ce9ae53a
import  -/  base-4.12.0.0:System.IO 7d8c7a747c93b42b043d691b66e1809e
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  process-1.6.3.0:System.Process 22aed689c45d22d84dac38b420810e02
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
a8ebbdf2772c4914a1332acf42081424
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
0cec5dba2a1b883d72e7f8f0cdb1cd81
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.List.$wlenAcc @ [GHC.Types.Char] ipv1 0# of ww2 {
                   DEFAULT
                   -> (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main5
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv
                   1#
                   -> case ipv1 of wild {
                        []
                        -> case GHC.List.badHead
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        : x ds2
                        -> case GHC.Base.eqString
                                  (GHC.CString.unpackCString# Main.main4)
                                  x of wild1 {
                             GHC.Types.False
                             -> case GHC.Base.eqString
                                       (GHC.CString.unpackCString# Main.main3)
                                       x of wild2 {
                                  GHC.Types.False
                                  -> case GHC.Base.eqString
                                            (GHC.CString.unpackCString# Main.main2)
                                            x of wild3 {
                                       GHC.Types.False
                                       -> case System.Process.system1
                                                 (GHC.Types.[] @ GHC.Types.Char)
                                                 ipv of ds3 { (#,#) ipv2 ipv3 ->
                                          (# ipv2, GHC.Tuple.() #) }
                                       GHC.Types.True
                                       -> (GHC.IO.Handle.Text.hPutStr'
                                             GHC.IO.Handle.FD.stdout
                                             Main.main5
                                             GHC.Types.True)
                                            `cast`
                                          (GHC.Types.N:IO[0] <()>_R)
                                            ipv }
                                  GHC.Types.True
                                  -> (GHC.IO.Handle.Text.hPutStr'
                                        GHC.IO.Handle.FD.stdout
                                        Main.main5
                                        GHC.Types.True)
                                       `cast`
                                     (GHC.Types.N:IO[0] <()>_R)
                                       ipv }
                             GHC.Types.True
                             -> (GHC.IO.Handle.Text.hPutStr'
                                   GHC.IO.Handle.FD.stdout
                                   Main.main5
                                   GHC.Types.True)
                                  `cast`
                                (GHC.Types.N:IO[0] <()>_R)
                                  ipv } }
                   2#
                   -> case System.Process.system1
                             (GHC.Types.[] @ GHC.Types.Char)
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      (# ipv2, GHC.Tuple.() #) }
                   3#
                   -> case System.Process.system1
                             (GHC.Types.[] @ GHC.Types.Char)
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      (# ipv2, GHC.Tuple.() #) }
                   4#
                   -> case System.Process.system1
                             (GHC.Types.[] @ GHC.Types.Char)
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      (# ipv2, GHC.Tuple.() #) } } }) -}
90f0bcc09c302d59f2ee257935713dca
  main2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("--help"#) -}
76e78e39fcec5963823411d36c470e87
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("-help"#) -}
a435d3f6389d09291dfc5ee2c04b073c
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("help"#) -}
788af939f6be8bdd85d3a744e14cc347
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main6) -}
2371f88a3c8b8241cbf841d87d221893
  main6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Usage examples:\n\
                 \\n\
                 \4 args: quizify #fff light images/ dist/\n\
                 \3 args: quizify #fff light dist/\n\
                 \2 args: quizify #fff dist/\n\
                 \1 arg:\n\
                 \  - quizify #fff\n\
                 \  - quizify help\n\
                 \  - quizify -help\n\
                 \  - quizify --help\n\
                 \\n\
                 \where:\n\
                 \  - #fff: changeable accent color\n\
                 \  - light: quiz theme, can be light or dark\n\
                 \  - images/: source img path\n\
                 \  - dist/: output directory"#) -}
91d6d231d47708d7ea9f011f0e08db53
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
7606d6039181d48ed0c87d5e4976643f
  quizify ::
    GHC.Base.String
    -> GHC.Types.Bool
    -> GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <L,A><L,A><L,A><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.quizify1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7baaaaaa2a056416234a44a1ad56a220
  quizify1 ::
    GHC.Base.String
    -> GHC.Types.Bool
    -> GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <L,A><L,A><L,A><L,A><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ (_accentColor :: GHC.Base.String)
                   (_isDark :: GHC.Types.Bool)
                   (_imageSource :: GHC.IO.FilePath)
                   (_dist :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Process.system1
                        (GHC.Types.[] @ GHC.Types.Char)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

